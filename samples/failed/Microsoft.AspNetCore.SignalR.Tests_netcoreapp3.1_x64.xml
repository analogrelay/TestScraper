<?xml version="1.0" encoding="utf-8"?>
<assemblies timestamp="01/16/2020 00:14:20">
  <assembly name="Microsoft.AspNetCore.SignalR.Tests.dll" environment="64-bit .NET Standard [collection-per-class, parallel (unlimited threads)]" test-framework="xUnit.net 2.4.1.0" run-date="2020-01-16" run-time="00:13:27" total="304" passed="299" failed="1" skipped="4" time="53.074" errors="0">
    <errors />
    <collection total="11" passed="11" failed="0" skipped="0" name="Test collection for Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests" time="0.051">
      <test name="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests.SupportsSubInterfaces" type="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests" method="SupportsSubInterfaces" time="0.0412989" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests.ThrowsIfInterfaceMethodHasRefParam" type="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests" method="ThrowsIfInterfaceMethodHasRefParam" time="0.0016521" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests.ThrowsIfProvidedADelegate" type="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests" method="ThrowsIfProvidedADelegate" time="0.0004063" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests.ProducesImplementationThatProxiesMethodsToIClientProxyAsync" type="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests" method="ProducesImplementationThatProxiesMethodsToIClientProxyAsync" time="0.0016845" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests.ThrowsIfInterfaceHasVoidReturningMethod" type="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests" method="ThrowsIfInterfaceHasVoidReturningMethod" time="0.0004993" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests.ThrowsIfProvidedAStruct" type="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests" method="ThrowsIfProvidedAStruct" time="0.0028943" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests.ThrowsIfInterfaceMethodHasOutParam" type="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests" method="ThrowsIfInterfaceMethodHasOutParam" time="0.0006429" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests.ThrowsIfInterfaceHasNonTaskReturns" type="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests" method="ThrowsIfInterfaceHasNonTaskReturns" time="0.0005226" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests.ThrowsIfInterfaceHasEvents" type="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests" method="ThrowsIfInterfaceHasEvents" time="0.000533" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests.ThrowsIfInterfaceHasProperties" type="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests" method="ThrowsIfInterfaceHasProperties" time="0.0004009" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests.ThrowsIfProvidedAClass" type="Microsoft.AspNetCore.SignalR.Tests.Internal.TypedClientBuilderTests" method="ThrowsIfProvidedAClass" time="0.0003891" result="Pass" />
    </collection>
    <collection total="6" passed="6" failed="0" skipped="0" name="Test collection for Microsoft.AspNetCore.SignalR.Tests.SerializedHubMessageTests" time="1.739">
      <test name="Microsoft.AspNetCore.SignalR.Tests.SerializedHubMessageTests.GetSerializedMessageReturnsCachedSerializationIfAvailable" type="Microsoft.AspNetCore.SignalR.Tests.SerializedHubMessageTests" method="GetSerializedMessageReturnsCachedSerializationIfAvailable" time="0.0092319" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.SerializedHubMessageTests.GetSerializedMessageSerializesUsingHubProtocolIfNoCacheAvailable" type="Microsoft.AspNetCore.SignalR.Tests.SerializedHubMessageTests" method="GetSerializedMessageSerializesUsingHubProtocolIfNoCacheAvailable" time="0.0005045" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.SerializedHubMessageTests.SerializingTwoMessagesFromTheSameProtocolSimultaneouslyResultsInOneCachedItemAsync(numberOfSerializationsToPreCache: 0)" type="Microsoft.AspNetCore.SignalR.Tests.SerializedHubMessageTests" method="SerializingTwoMessagesFromTheSameProtocolSimultaneouslyResultsInOneCachedItemAsync" time="0.9592589" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.SerializedHubMessageTests.SerializingTwoMessagesFromTheSameProtocolSimultaneouslyResultsInOneCachedItemAsync(numberOfSerializationsToPreCache: 1)" type="Microsoft.AspNetCore.SignalR.Tests.SerializedHubMessageTests" method="SerializingTwoMessagesFromTheSameProtocolSimultaneouslyResultsInOneCachedItemAsync" time="0.2741654" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.SerializedHubMessageTests.SerializingTwoMessagesFromTheSameProtocolSimultaneouslyResultsInOneCachedItemAsync(numberOfSerializationsToPreCache: 2)" type="Microsoft.AspNetCore.SignalR.Tests.SerializedHubMessageTests" method="SerializingTwoMessagesFromTheSameProtocolSimultaneouslyResultsInOneCachedItemAsync" time="0.1546257" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.SerializedHubMessageTests.SerializingTwoMessagesFromTheSameProtocolSimultaneouslyResultsInOneCachedItemAsync(numberOfSerializationsToPreCache: 5)" type="Microsoft.AspNetCore.SignalR.Tests.SerializedHubMessageTests" method="SerializingTwoMessagesFromTheSameProtocolSimultaneouslyResultsInOneCachedItemAsync" time="0.3413854" result="Pass" />
    </collection>
    <collection total="3" passed="3" failed="0" skipped="0" name="Test collection for Microsoft.AspNetCore.SignalR.Tests.HubReflectionHelperTests" time="0.013">
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubReflectionHelperTests.EmptyHubHasNoHubMethods" type="Microsoft.AspNetCore.SignalR.Tests.HubReflectionHelperTests" method="EmptyHubHasNoHubMethods" time="0.0017299" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubReflectionHelperTests.HubWithMethodsHasHubMethods" type="Microsoft.AspNetCore.SignalR.Tests.HubReflectionHelperTests" method="HubWithMethodsHasHubMethods" time="0.0096213" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubReflectionHelperTests.InheritedHubHasBaseHubMethodsAndOwnMethods" type="Microsoft.AspNetCore.SignalR.Tests.HubReflectionHelperTests" method="InheritedHubHasBaseHubMethodsAndOwnMethods" time="0.0018433" result="Pass" />
    </collection>
    <collection total="4" passed="4" failed="0" skipped="0" name="Test collection for Microsoft.AspNetCore.SignalR.Tests.DefaultHubActivatorTests" time="0.179">
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubActivatorTests.HubCreatedIfNotResolvedFromServiceProvider" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubActivatorTests" method="HubCreatedIfNotResolvedFromServiceProvider" time="0.1182783" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubActivatorTests.DisposeNotCalledForHubsResolvedFromServiceProvider" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubActivatorTests" method="DisposeNotCalledForHubsResolvedFromServiceProvider" time="0.0584963" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubActivatorTests.CannotReleaseNullHub" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubActivatorTests" method="CannotReleaseNullHub" time="0.000628" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubActivatorTests.HubCanBeResolvedFromServiceProvider" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubActivatorTests" method="HubCanBeResolvedFromServiceProvider" time="0.0011254" result="Pass" />
    </collection>
    <collection total="7" passed="7" failed="0" skipped="0" name="Test collection for Microsoft.AspNetCore.SignalR.Tests.AddSignalRTests" time="0.065">
      <test name="Microsoft.AspNetCore.SignalR.Tests.AddSignalRTests.HubSpecificOptionsDoNotAffectGlobalHubOptions" type="Microsoft.AspNetCore.SignalR.Tests.AddSignalRTests" method="HubSpecificOptionsDoNotAffectGlobalHubOptions" time="0.0241478" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.AddSignalRTests.ServicesAddedBeforeAddSignalRAreUsed" type="Microsoft.AspNetCore.SignalR.Tests.AddSignalRTests" method="ServicesAddedBeforeAddSignalRAreUsed" time="0.0025156" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.AddSignalRTests.StreamBufferCapacityGetSet" type="Microsoft.AspNetCore.SignalR.Tests.AddSignalRTests" method="StreamBufferCapacityGetSet" time="0.0052099" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.AddSignalRTests.ServicesAddedAfterAddSignalRAreUsed" type="Microsoft.AspNetCore.SignalR.Tests.AddSignalRTests" method="ServicesAddedAfterAddSignalRAreUsed" time="0.0005733" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.AddSignalRTests.UserSpecifiedOptionsRunAfterDefaultOptions" type="Microsoft.AspNetCore.SignalR.Tests.AddSignalRTests" method="UserSpecifiedOptionsRunAfterDefaultOptions" time="0.0039724" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.AddSignalRTests.HubSpecificOptionsHaveSameValuesAsGlobalHubOptions" type="Microsoft.AspNetCore.SignalR.Tests.AddSignalRTests" method="HubSpecificOptionsHaveSameValuesAsGlobalHubOptions" time="0.0074226" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.AddSignalRTests.HubProtocolsWithNonDefaultAttributeNotAddedToSupportedProtocols" type="Microsoft.AspNetCore.SignalR.Tests.AddSignalRTests" method="HubProtocolsWithNonDefaultAttributeNotAddedToSupportedProtocols" time="0.0206648" result="Pass" />
    </collection>
    <collection total="9" passed="9" failed="0" skipped="0" name="Test collection for Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests" time="0.078">
      <test name="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests.AllClientProxy_SendAsync_ArrayArgumentNotExpanded" type="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests" method="AllClientProxy_SendAsync_ArrayArgumentNotExpanded" time="0.0325346" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests.UserProxy_SendAsync_ArrayArgumentNotExpanded" type="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests" method="UserProxy_SendAsync_ArrayArgumentNotExpanded" time="0.005138" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests.MultipleClientProxy_SendAsync_ArrayArgumentNotExpanded" type="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests" method="MultipleClientProxy_SendAsync_ArrayArgumentNotExpanded" time="0.0029136" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests.GroupProxy_SendAsync_ArrayArgumentNotExpanded" type="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests" method="GroupProxy_SendAsync_ArrayArgumentNotExpanded" time="0.0026352" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests.MultipleUserProxy_SendAsync_ArrayArgumentNotExpanded" type="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests" method="MultipleUserProxy_SendAsync_ArrayArgumentNotExpanded" time="0.002647" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests.AllClientsExceptProxy_SendAsync_ArrayArgumentNotExpanded" type="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests" method="AllClientsExceptProxy_SendAsync_ArrayArgumentNotExpanded" time="0.018267" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests.GroupExceptProxy_SendAsync_ArrayArgumentNotExpanded" type="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests" method="GroupExceptProxy_SendAsync_ArrayArgumentNotExpanded" time="0.008924" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests.MultipleGroupProxy_SendAsync_ArrayArgumentNotExpanded" type="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests" method="MultipleGroupProxy_SendAsync_ArrayArgumentNotExpanded" time="0.002663" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests.SingleClientProxy_SendAsync_ArrayArgumentNotExpanded" type="Microsoft.AspNetCore.SignalR.Tests.ClientHubProxyTests" method="SingleClientProxy_SendAsync_ArrayArgumentNotExpanded" time="0.0025262" result="Pass" />
    </collection>
    <collection total="11" passed="11" failed="0" skipped="0" name="Test collection for Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests" time="1.551">
      <test name="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests.MapSignalRFailsForInvalidHub" type="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests" method="MapSignalRFailsForInvalidHub" time="0.163064" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests.NotAddingSignalRServiceThrowsWhenUsingEndpointRouting" type="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests" method="NotAddingSignalRServiceThrowsWhenUsingEndpointRouting" time="0.5273449" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests.MapHubEndPointRoutingAppliesAttributesBeforeConventions" type="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests" method="MapHubEndPointRoutingAppliesAttributesBeforeConventions" time="0.2135453" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests.NotAddingSignalRServiceThrows" type="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests" method="NotAddingSignalRServiceThrows" time="0.1005935" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests.MapHubAppliesHubMetadata" type="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests" method="MapHubAppliesHubMetadata" time="0.0900664" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests.MapHubEndPointRoutingFindsAttributesOnHubAndFromOptions" type="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests" method="MapHubEndPointRoutingFindsAttributesOnHubAndFromOptions" time="0.0584679" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests.MapHubFindsAuthAttributeOnInheritedHub" type="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests" method="MapHubFindsAuthAttributeOnInheritedHub" time="0.3137192" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests.MapHubFindsAuthAttributeOnHub" type="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests" method="MapHubFindsAuthAttributeOnHub" time="0.0413712" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests.MapHubEndPointRoutingAppliesHubMetadata" type="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests" method="MapHubEndPointRoutingAppliesHubMetadata" time="0.0249999" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests.MapHubFindsMultipleAuthAttributesOnDoubleAuthHub" type="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests" method="MapHubFindsMultipleAuthAttributesOnDoubleAuthHub" time="0.0119762" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests.MapHubEndPointRoutingFindsAttributesOnHub" type="Microsoft.AspNetCore.SignalR.Tests.MapSignalRTests" method="MapHubEndPointRoutingFindsAttributesOnHub" time="0.0060891" result="Pass" />
    </collection>
    <collection total="10" passed="10" failed="0" skipped="0" name="Test collection for Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests" time="0.002">
      <test name="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests.DefaultHubProtocolResolverCreatesProtocolswhenSupoortedProtocolsIsNull(protocolName: \&quot;json\&quot;)" type="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests" method="DefaultHubProtocolResolverCreatesProtocolswhenSupoortedProtocolsIsNull" time="0.0008444" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests.DefaultHubProtocolResolverCreatesProtocolswhenSupoortedProtocolsIsNull(protocolName: \&quot;messagepack\&quot;)" type="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests" method="DefaultHubProtocolResolverCreatesProtocolswhenSupoortedProtocolsIsNull" time="0.0000232" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests.DefaultHubProtocolResolverThrowsForNullProtocol" type="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests" method="DefaultHubProtocolResolverThrowsForNullProtocol" time="0.0003928" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests.DefaultHubProtocolResolverTestsCanCreateAllProtocols(protocolName: \&quot;json\&quot;)" type="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests" method="DefaultHubProtocolResolverTestsCanCreateAllProtocols" time="0.0001707" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests.DefaultHubProtocolResolverTestsCanCreateAllProtocols(protocolName: \&quot;messagepack\&quot;)" type="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests" method="DefaultHubProtocolResolverTestsCanCreateAllProtocols" time="0.0000164" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests.AllProtocolsOnlyReturnsLatestOfSameType" type="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests" method="AllProtocolsOnlyReturnsLatestOfSameType" time="0.0002958" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests.DefaultHubProtocolResolverReturnsNullForNotSupportedProtocol" type="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests" method="DefaultHubProtocolResolverReturnsNullForNotSupportedProtocol" time="0.0001162" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests.DefaultHubProtocolResolverTestsCanCreateSupportedProtocols(protocolName: \&quot;json\&quot;)" type="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests" method="DefaultHubProtocolResolverTestsCanCreateSupportedProtocols" time="0.0001831" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests.DefaultHubProtocolResolverTestsCanCreateSupportedProtocols(protocolName: \&quot;messagepack\&quot;)" type="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests" method="DefaultHubProtocolResolverTestsCanCreateSupportedProtocols" time="0.0000177" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests.RegisteringMultipleHubProtocolsReplacesWithLatest" type="Microsoft.AspNetCore.SignalR.Common.Protocol.Tests.DefaultHubProtocolResolverTests" method="RegisteringMultipleHubProtocolsReplacesWithLatest" time="0.0002467" result="Pass" />
    </collection>
    <collection total="5" passed="5" failed="0" skipped="0" name="Test collection for Microsoft.AspNetCore.SignalR.Tests.Internal.ReflectionHelperTests" time="0.002">
      <test name="Microsoft.AspNetCore.SignalR.Tests.Internal.ReflectionHelperTests.IsIAsyncEnumerableTests(type: typeof(System.Collections.Generic.IAsyncEnumerable&lt;object&gt;), expectedOutcome: True)" type="Microsoft.AspNetCore.SignalR.Tests.Internal.ReflectionHelperTests" method="IsIAsyncEnumerableTests" time="0.0020191" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.Internal.ReflectionHelperTests.IsIAsyncEnumerableTests(type: typeof(System.Threading.Channels.ChannelReader&lt;object&gt;), expectedOutcome: False)" type="Microsoft.AspNetCore.SignalR.Tests.Internal.ReflectionHelperTests" method="IsIAsyncEnumerableTests" time="0.000028" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.Internal.ReflectionHelperTests.IsIAsyncEnumerableTests(type: typeof(Microsoft.AspNetCore.SignalR.Tests.Internal.ReflectionHelperTests+&lt;&lt;TypesToCheck&gt;g__Stream|1_0&gt;d), expectedOutcome: True)" type="Microsoft.AspNetCore.SignalR.Tests.Internal.ReflectionHelperTests" method="IsIAsyncEnumerableTests" time="0.0000173" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.Internal.ReflectionHelperTests.IsIAsyncEnumerableTests(type: typeof(string), expectedOutcome: False)" type="Microsoft.AspNetCore.SignalR.Tests.Internal.ReflectionHelperTests" method="IsIAsyncEnumerableTests" time="0.0000116" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.Internal.ReflectionHelperTests.IsIAsyncEnumerableTests(type: typeof(Microsoft.AspNetCore.SignalR.Tests.Internal.ReflectionHelperTests+CustomAsyncEnumerable), expectedOutcome: True)" type="Microsoft.AspNetCore.SignalR.Tests.Internal.ReflectionHelperTests" method="IsIAsyncEnumerableTests" time="0.0000122" result="Pass" />
    </collection>
    <collection total="20" passed="20" failed="0" skipped="0" name="Test collection for Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" time="0.008">
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryCreatesRequestedTransportIfAvailable(requestedTransport: ServerSentEvents, expectedTransportType: typeof(Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport))" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryCreatesRequestedTransportIfAvailable" time="0.0032199" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryCreatesRequestedTransportIfAvailable(requestedTransport: WebSockets, expectedTransportType: typeof(Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport))" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryCreatesRequestedTransportIfAvailable" time="0.0025898" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryCreatesRequestedTransportIfAvailable(requestedTransport: LongPolling, expectedTransportType: typeof(Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport))" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryCreatesRequestedTransportIfAvailable" time="0.0001754" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryCanBeCreatedWithoutHttpClientIfWebSocketsTransportRequestedExplicitly" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryCanBeCreatedWithoutHttpClientIfWebSocketsTransportRequestedExplicitly" time="0.0004622" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryCannotBeCreatedWithoutHttpClient(transportType: WebSockets | ServerSentEvents | LongPolling)" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryCannotBeCreatedWithoutHttpClient" time="0.0003079" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryCannotBeCreatedWithoutHttpClient(transportType: LongPolling)" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryCannotBeCreatedWithoutHttpClient" time="0.0000606" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryCannotBeCreatedWithoutHttpClient(transportType: ServerSentEvents)" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryCannotBeCreatedWithoutHttpClient" time="0.0000604" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryCannotBeCreatedWithoutHttpClient(transportType: WebSockets | LongPolling)" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryCannotBeCreatedWithoutHttpClient" time="0.0000711" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryCannotBeCreatedWithoutHttpClient(transportType: WebSockets | ServerSentEvents)" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryCannotBeCreatedWithoutHttpClient" time="0.000061" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryCreatesWebSocketsTransportIfAvailable" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryCreatesWebSocketsTransportIfAvailable" time="0.0001585" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryThrowsIfItCannotCreateRequestedTransport_Win7(requestedTransport: WebSockets)" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryThrowsIfItCannotCreateRequestedTransport_Win7" time="0.0002057" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryThrowsIfItCannotCreateRequestedTransport(requestedTransport: WebSockets)" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryThrowsIfItCannotCreateRequestedTransport" time="0.0003808" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryThrowsIfItCannotCreateRequestedTransport(requestedTransport: ServerSentEvents)" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryThrowsIfItCannotCreateRequestedTransport" time="0.0000695" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryThrowsIfItCannotCreateRequestedTransport(requestedTransport: LongPolling)" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryThrowsIfItCannotCreateRequestedTransport" time="0.0000693" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryThrowsIfItCannotCreateRequestedTransport(requestedTransport: WebSockets | ServerSentEvents | LongPolling)" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryThrowsIfItCannotCreateRequestedTransport" time="0.0000628" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryCanBeCreatedWithNoOrUnknownTransportTypeFlags(transportType: None)" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryCanBeCreatedWithNoOrUnknownTransportTypeFlags" time="0.0001692" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryCanBeCreatedWithNoOrUnknownTransportTypeFlags(transportType: 2147483647)" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryCanBeCreatedWithNoOrUnknownTransportTypeFlags" time="0.0000239" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryCreatesRequestedTransportIfAvailable_Win7(requestedTransport: WebSockets | ServerSentEvents | LongPolling, expectedTransportType: typeof(Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport))" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryCreatesRequestedTransportIfAvailable_Win7" time="0.0001346" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryCreatesRequestedTransportIfAvailable_Win7(requestedTransport: ServerSentEvents, expectedTransportType: typeof(Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport))" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryCreatesRequestedTransportIfAvailable_Win7" time="0.000009" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests.DefaultTransportFactoryCreatesRequestedTransportIfAvailable_Win7(requestedTransport: LongPolling, expectedTransportType: typeof(Microsoft.AspNetCore.Http.Connections.Client.Internal.LongPollingTransport))" type="Microsoft.AspNetCore.SignalR.Tests.DefaultTransportFactoryTests" method="DefaultTransportFactoryCreatesRequestedTransportIfAvailable_Win7" time="0.0000098" result="Pass" />
    </collection>
    <collection total="14" passed="14" failed="0" skipped="0" name="Test collection for Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests" time="1.777">
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests.SendGroupExceptAsyncWillCancelWithToken" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests" method="SendGroupExceptAsyncWillCancelWithToken" time="0.975538" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests.SendAllAsyncWritesToAllConnectionsOutput" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests" method="SendAllAsyncWritesToAllConnectionsOutput" time="0.0054216" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests.SendUserAsyncWillCancelWithToken" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests" method="SendUserAsyncWillCancelWithToken" time="0.163319" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests.SendGroupAsyncWritesToAllConnectionsInGroupOutput" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests" method="SendGroupAsyncWritesToAllConnectionsInGroupOutput" time="0.0022622" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests.SendGroupsAsyncWillCancelWithToken" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests" method="SendGroupsAsyncWillCancelWithToken" time="0.1127379" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests.SendConnectionAsyncWritesToConnectionOutput" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests" method="SendConnectionAsyncWritesToConnectionOutput" time="0.0021256" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests.SendGroupExceptAsyncDoesNotWriteToExcludedConnections" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests" method="SendGroupExceptAsyncDoesNotWriteToExcludedConnections" time="0.0022608" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests.SendConnectionsAsyncWillCancelWithToken" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests" method="SendConnectionsAsyncWillCancelWithToken" time="0.0747062" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests.SendConnectionAsyncWillCancelWithToken" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests" method="SendConnectionAsyncWillCancelWithToken" time="0.3733943" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests.SendUsersAsyncWillCancelWithToken" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests" method="SendUsersAsyncWillCancelWithToken" time="0.0467841" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests.SendAllAsyncWillCancelWithToken" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests" method="SendAllAsyncWillCancelWithToken" time="0.0036369" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests.SendAllAsyncDoesNotWriteToDisconnectedConnectionsOutput" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests" method="SendAllAsyncDoesNotWriteToDisconnectedConnectionsOutput" time="0.0044787" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests.SendGroupAsyncWillCancelWithToken" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests" method="SendGroupAsyncWillCancelWithToken" time="0.0018237" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests.SendAllExceptAsyncWillCancelWithToken" type="Microsoft.AspNetCore.SignalR.Tests.DefaultHubLifetimeManagerTests" method="SendAllExceptAsyncWillCancelWithToken" time="0.0084693" result="Pass" />
    </collection>
    <collection total="167" passed="163" failed="1" skipped="3" name="Test collection for Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" time="50.908">
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.BroadcastHubMethodSendsToAllClients(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.DynamicTestHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="BroadcastHubMethodSendsToAllClients" time="0.6378927" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.BroadcastHubMethodSendsToAllClients(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.MethodHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="BroadcastHubMethodSendsToAllClients" time="0.261157" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.BroadcastHubMethodSendsToAllClients(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.HubT))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="BroadcastHubMethodSendsToAllClients" time="0.5091568" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.CanCallOverridenVirtualHubMethod" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="CanCallOverridenVirtualHubMethod" time="0.0307645" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.EndingConnectionSendsCloseMessageWithNoError" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="EndingConnectionSendsCloseMessageWithNoError" time="0.2227831" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HandshakeFailureFromUnknownProtocolSendsResponseWithError" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HandshakeFailureFromUnknownProtocolSendsResponseWithError" time="0.0645121" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HandshakeSuccessSendsResponseWithoutError" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HandshakeSuccessSendsResponseWithoutError" time="0.0775519" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.UploadStreamWithTooFewStreamsFails" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="UploadStreamWithTooFewStreamsFails" time="0.0881783" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMethodCanReturnValueFromValueTask" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubMethodCanReturnValueFromValueTask" time="0.0920178" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMethodNameAttributeIsInherited" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubMethodNameAttributeIsInherited" time="0.0058686" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.DoesNotWritePingMessagesIfSufficientOtherMessagesAreSent" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="DoesNotWritePingMessagesIfSufficientOtherMessagesAreSent" time="0.7107245" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubOptionsCanUseCustomMessagePackSettings" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubOptionsCanUseCustomMessagePackSettings" time="0.4983299" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMethodsAreCaseInsensitive(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.DynamicTestHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubMethodsAreCaseInsensitive" time="0.1313588" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMethodsAreCaseInsensitive(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.MethodHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubMethodsAreCaseInsensitive" time="0.1457397" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMethodsAreCaseInsensitive(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.HubT))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubMethodsAreCaseInsensitive" time="0.1052003" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToOthersInGroup(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.DynamicTestHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToOthersInGroup" time="0.0888884" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToOthersInGroup(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.MethodHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToOthersInGroup" time="0.1376532" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToOthersInGroup(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.HubT))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToOthersInGroup" time="0.0445121" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.UploadStreamAndStreamingMethodClosesStreamsOnServerWhenMethodCompletes" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="UploadStreamAndStreamingMethodClosesStreamsOnServerWhenMethodCompletes" time="0.2290142" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToMultipleClients(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.DynamicTestHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToMultipleClients" time="0.0774112" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToMultipleClients(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.MethodHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToMultipleClients" time="0.1044025" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToMultipleClients(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.HubT))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToMultipleClients" time="0.0813065" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ManyHubMessagesOneOverTheMaxMessageSizeThrows" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ManyHubMessagesOneOverTheMaxMessageSizeThrows" time="0.0536236" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.MissingHandshakeAndMessageSentFromHubConnectionCanBeDisposedCleanly" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="MissingHandshakeAndMessageSentFromHubConnectionCanBeDisposedCleanly" time="0.0076129" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendingInvocatonInChunksWorks" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendingInvocatonInChunksWorks" time="0.0518977" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.UploadStreamClosesStreamsOnServerWhenMethodCompletes" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="UploadStreamClosesStreamsOnServerWhenMethodCompletes" time="0.220085" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ConnectionNotTimedOutIfClientNeverPings" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ConnectionNotTimedOutIfClientNeverPings" time="0.2727734" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ErrorInHubOnConnectSendsCloseMessageWithError(detailedErrors: True)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ErrorInHubOnConnectSendsCloseMessageWithError" time="0.0109976" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ErrorInHubOnConnectSendsCloseMessageWithError(detailedErrors: False)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ErrorInHubOnConnectSendsCloseMessageWithError" time="0.0022058" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.DetailedExceptionEvenWhenNotExplicitlySet" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="DetailedExceptionEvenWhenNotExplicitlySet" time="0.0938413" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ConnectionClosedWhenHandshakeLargerThanMaxMessageSize" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ConnectionClosedWhenHandshakeLargerThanMaxMessageSize" time="0.0389482" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.CanGetHttpContextFromHubConnectionContext" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="CanGetHttpContextFromHubConnectionContext" time="0.0919256" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.NonBlockingInvocationDoesNotSendCompletion(methodName: \&quot;VoidMethod\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="NonBlockingInvocationDoesNotSendCompletion" time="0.0852942" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.NonBlockingInvocationDoesNotSendCompletion(methodName: \&quot;MethodThatThrows\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="NonBlockingInvocationDoesNotSendCompletion" time="0.0872791" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.NonBlockingInvocationDoesNotSendCompletion(methodName: \&quot;ValueMethod\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="NonBlockingInvocationDoesNotSendCompletion" time="0.0974317" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.StreamInvocationsBlockOtherInvocationsUntilTheyStartStreaming" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="StreamInvocationsBlockOtherInvocationsUntilTheyStartStreaming" time="0.0565661" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanSendToConnection(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.DynamicTestHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanSendToConnection" time="0.093543" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanSendToConnection(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.MethodHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanSendToConnection" time="0.1471073" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanSendToConnection(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.HubT))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanSendToConnection" time="0.0476394" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubOptionsCanNotHaveNullSupportedProtocols" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubOptionsCanNotHaveNullSupportedProtocols" time="0.1029874" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.UploadManyStreams" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="UploadManyStreams" time="0.1600085" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ServerSendsCloseWithErrorWhenConnectionClosedWithPartialMessage" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ServerSendsCloseWithErrorWhenConnectionClosedWithPartialMessage" time="0.0082618" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.LifetimeManagerOnDisconnectedAsyncCalledIfHubOnDisconnectedAsyncThrows" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="LifetimeManagerOnDisconnectedAsyncCalledIfHubOnDisconnectedAsyncThrows" time="0.0231884" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.AbortFromHubMethodForcesClientDisconnect" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="AbortFromHubMethodForcesClientDisconnect" time="0.0082617" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMethodWithAuthorizationProvidesResourceToAuthHandlers" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubMethodWithAuthorizationProvidesResourceToAuthHandlers" time="0.0929614" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.GetHttpContextFromHubConnectionContextHandlesNull" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="GetHttpContextFromHubConnectionContextHandlesNull" time="0.1058699" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.DelayedSendTest" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="DelayedSendTest" time="0.1919432" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ReceivingMessagesPreventsConnectionTimeoutFromOccuring" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ReceivingMessagesPreventsConnectionTimeoutFromOccuring" time="1.1482033" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.InvocationsRunInOrder" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="InvocationsRunInOrder" time="0.0550766" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.FailsToInitializeInvalidTypedHub" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="FailsToInitializeInvalidTypedHub" time="0.0074573" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.StreamingInvocationsDoNotBlockOtherInvocations" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="StreamingInvocationsDoNotBlockOtherInvocations" time="0.0292685" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.AsyncDisposablesInHubsAreSupported" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="AsyncDisposablesInHubsAreSupported" time="0.0152486" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendArraySendsArrayToAllClients" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendArraySendsArrayToAllClients" time="0.1148748" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ConnectionTimesOutIfInitialPingAndThenNoMessages" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ConnectionTimesOutIfInitialPingAndThenNoMessages" time="0.6963051" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.RemoveFromGroupWhenNotInGroupDoesNotFail" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="RemoveFromGroupWhenNotInGroupDoesNotFail" time="0.0848355" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMethodWithMultiParam" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubMethodWithMultiParam" time="0.0889412" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.InvokeHubMethodCannotAcceptCancellationTokenAsArgument" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="InvokeHubMethodCannotAcceptCancellationTokenAsArgument" time="0.0780948" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToGroupExcept(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.DynamicTestHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToGroupExcept" time="0.0399066" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToGroupExcept(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.MethodHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToGroupExcept" time="0.1023186" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToGroupExcept(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.HubT))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToGroupExcept" time="0.0507097" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.CanCallInheritedHubMethodFromInheritingHub" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="CanCallInheritedHubMethodFromInheritingHub" time="0.0148862" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.UploadStreamItemInvalidId" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="UploadStreamItemInvalidId" time="0.0914361" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanAddAndSendToGroup(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.DynamicTestHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanAddAndSendToGroup" time="0.0366574" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanAddAndSendToGroup(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.MethodHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanAddAndSendToGroup" time="0.0927441" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanAddAndSendToGroup(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.HubT))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanAddAndSendToGroup" time="0.0398127" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.UploadStreamedObjects" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="UploadStreamedObjects" time="0" result="Skip">
        <reason><![CDATA[Object not supported yet]]></reason>
      </test>
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.WritesPingMessageIfNothingWrittenWhenKeepAliveIntervalElapses" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="WritesPingMessageIfNothingWrittenWhenKeepAliveIntervalElapses" time="0.7219161" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.UploadStreamItemInvalidType" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="UploadStreamItemInvalidType" time="0.1210182" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.StreamHubMethodCanAcceptNullableParameter" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="StreamHubMethodCanAcceptNullableParameter" time="0.0217102" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMethodDoesNotSendResultWhenInvocationIsNonBlocking" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubMethodDoesNotSendResultWhenInvocationIsNonBlocking" time="0.0856985" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubOptionsCanUseCustomJsonSerializerSettings" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubOptionsCanUseCustomJsonSerializerSettings" time="0.1155789" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ConnectionAbortedTokenTriggers" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ConnectionAbortedTokenTriggers" time="0.0352264" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMethodCanThrowOrYieldFailedTask(methodName: \&quot;MethodThatThrows\&quot;, detailedErrors: True)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubMethodCanThrowOrYieldFailedTask" time="0.1099422" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMethodCanThrowOrYieldFailedTask(methodName: \&quot;MethodThatYieldsFailedTask\&quot;, detailedErrors: False)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubMethodCanThrowOrYieldFailedTask" time="0.0931576" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HandshakeTimesOut" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HandshakeTimesOut" time="0.0172736" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMethodInvokeDoesNotCountTowardsClientTimeout" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubMethodInvokeDoesNotCountTowardsClientTimeout" time="30.047384" result="Fail">
        <failure exception-type="System.TimeoutException">
          <message><![CDATA[System.TimeoutException : The operation at /_/src/SignalR/server/SignalR/test/HubConnectionHandlerTests.cs:2836 timed out after reaching the limit of 30000ms.]]></message>
          <stack-trace><![CDATA[   at Microsoft.AspNetCore.Testing.TaskExtensions.TimeoutAfter(Task task, TimeSpan timeout, String filePath, Int32 lineNumber)
   at Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMethodInvokeDoesNotCountTowardsClientTimeout() in /_/src/SignalR/server/SignalR/test/HubConnectionHandlerTests.cs:line 2837
--- End of stack trace from previous location where exception was thrown ---]]></stack-trace>
        </failure>
      </test>
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.UploadStreamWithTooManyStreamsFails" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="UploadStreamWithTooManyStreamsFails" time="0.1091992" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.CanSendToConnectionsWithDifferentProtocols" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="CanSendToConnectionsWithDifferentProtocols" time="0.0919937" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.OnDisconnectedAsyncTriggersWhenAbortedTokenCallbackThrows" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="OnDisconnectedAsyncTriggersWhenAbortedTokenCallbackThrows" time="0.0064146" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsAreDisposed" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsAreDisposed" time="0.006527" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.CannotCallObjectMethodsOnHub" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="CannotCallObjectMethodsOnHub" time="0.0812228" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToCaller(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.DynamicTestHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToCaller" time="0.0402108" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToCaller(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.MethodHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToCaller" time="0.0764174" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToCaller(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.HubT))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToCaller" time="0.0572026" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCannotHaveOverloadedMethods" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCannotHaveOverloadedMethods" time="0.0033694" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.CanPassStreamingParameterToStreamHubMethod" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="CanPassStreamingParameterToStreamHubMethod" time="0.0767872" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.UploadStreamFromSendReleasesHubActivatorOnceComplete" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="UploadStreamFromSendReleasesHubActivatorOnceComplete" time="0.1066349" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.UploadStreamItemInvalidTypeAutoCasts" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="UploadStreamItemInvalidTypeAutoCasts" time="0" result="Skip">
        <reason><![CDATA[Magic auto cast not supported]]></reason>
      </test>
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.InvokeMultipleGroups(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.DynamicTestHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="InvokeMultipleGroups" time="0.0613466" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.InvokeMultipleGroups(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.MethodHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="InvokeMultipleGroups" time="0.0989008" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.InvokeMultipleGroups(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.HubT))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="InvokeMultipleGroups" time="0.0549373" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.CannotCallDisposeMethodOnHub" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="CannotCallDisposeMethodOnHub" time="0.0907985" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ConnectionUserIdIsAssignedByUserIdProvider" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ConnectionUserIdIsAssignedByUserIdProvider" time="0.0958566" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.CanLoadHubContext" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="CanLoadHubContext" time="0.0012605" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.AuthorizedConnectionCanInvokeHubMethodWithAuthorization" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="AuthorizedConnectionCanInvokeHubMethodWithAuthorization" time="0.0914036" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubOnDisconnectedAsyncCalledIfHubOnConnectedAsyncThrows" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubOnDisconnectedAsyncCalledIfHubOnConnectedAsyncThrows" time="0.0227059" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.NonErrorCompletionSentWhenStreamCanceledFromClient" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="NonErrorCompletionSentWhenStreamCanceledFromClient" time="0.0266779" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.StreamHubMethodCanAcceptNullableParameterWithCancellationToken" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="StreamHubMethodCanAcceptNullableParameterWithCancellationToken" time="0.0220454" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.UploadStringsToConcat" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="UploadStringsToConcat" time="0.1200293" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMethodCanBeVoid" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubMethodCanBeVoid" time="0.0909109" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToAllExcept(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.DynamicTestHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToAllExcept" time="0.0745624" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToAllExcept(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.MethodHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToAllExcept" time="0.1086129" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToAllExcept(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.HubT))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToAllExcept" time="0.0487843" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.CanPassDerivedParameterToStreamHubMethod(method: \&quot;DerivedParameterInterfaceAsyncEnumerable\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="CanPassDerivedParameterToStreamHubMethod" time="0.0497703" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.CanPassDerivedParameterToStreamHubMethod(method: \&quot;DerivedParameterBaseClassAsyncEnumerable\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="CanPassDerivedParameterToStreamHubMethod" time="0.022423" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.CanPassDerivedParameterToStreamHubMethod(method: \&quot;DerivedParameterInterfaceAsyncEnumerableWithCancel\&quot;...)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="CanPassDerivedParameterToStreamHubMethod" time="0.0221356" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.CanPassDerivedParameterToStreamHubMethod(method: \&quot;DerivedParameterBaseClassAsyncEnumerableWithCancel\&quot;...)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="CanPassDerivedParameterToStreamHubMethod" time="0.0309967" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.UnauthorizedConnectionCannotInvokeHubMethodWithAuthorization" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="UnauthorizedConnectionCannotInvokeHubMethodWithAuthorization" time="0.0869281" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.UploadStreamCompleteWithError" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="UploadStreamCompleteWithError" time="0.1159464" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanStreamResponses(method: \&quot;CounterChannel\&quot;, protocolName: \&quot;json\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanStreamResponses" time="0.0267015" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanStreamResponses(method: \&quot;CounterChannel\&quot;, protocolName: \&quot;messagepack\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanStreamResponses" time="0.0295051" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanStreamResponses(method: \&quot;CounterChannelAsync\&quot;, protocolName: \&quot;json\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanStreamResponses" time="0.0470264" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanStreamResponses(method: \&quot;CounterChannelAsync\&quot;, protocolName: \&quot;messagepack\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanStreamResponses" time="0.0496261" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanStreamResponses(method: \&quot;CounterChannelValueTaskAsync\&quot;, protocolName: \&quot;json\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanStreamResponses" time="0.0334184" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanStreamResponses(method: \&quot;CounterChannelValueTaskAsync\&quot;, protocolName: \&quot;messagepack\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanStreamResponses" time="0.0261455" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanStreamResponses(method: \&quot;CounterAsyncEnumerable\&quot;, protocolName: \&quot;json\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanStreamResponses" time="0.0304954" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanStreamResponses(method: \&quot;CounterAsyncEnumerable\&quot;, protocolName: \&quot;messagepack\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanStreamResponses" time="0.0239502" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanStreamResponses(method: \&quot;CounterAsyncEnumerableAsync\&quot;, protocolName: \&quot;json\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanStreamResponses" time="0.0506867" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanStreamResponses(method: \&quot;CounterAsyncEnumerableAsync\&quot;, protocolName: \&quot;messagepack\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanStreamResponses" time="0.0472388" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanStreamResponses(method: \&quot;CounterAsyncEnumerableImpl\&quot;, protocolName: \&quot;json\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanStreamResponses" time="0.0287173" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanStreamResponses(method: \&quot;CounterAsyncEnumerableImpl\&quot;, protocolName: \&quot;messagepack\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanStreamResponses" time="0.0327704" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanStreamResponses(method: \&quot;AsyncEnumerableIsPreferedOverChannelReader\&quot;, protocolName: \&quot;json\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanStreamResponses" time="0.018585" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanStreamResponses(method: \&quot;AsyncEnumerableIsPreferedOverChannelReader\&quot;, protocolName: \&quot;messagepack\&quot;)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanStreamResponses" time="0.0442164" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.CannotCallStaticHubMethods" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="CannotCallStaticHubMethods" time="0.0948411" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HandshakeFailureFromUnsupportedFormatSendsResponseWithError" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HandshakeFailureFromUnsupportedFormatSendsResponseWithError" time="0.0390469" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ServerReportsProtocolMinorVersion" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ServerReportsProtocolMinorVersion" time="0.0732194" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HandshakeFailureFromIncompatibleProtocolVersionSendsResponseWithError" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HandshakeFailureFromIncompatibleProtocolVersionSendsResponseWithError" time="0.0460514" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.JsonHubProtocolUsesCamelCasingByDefault" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="JsonHubProtocolUsesCamelCasingByDefault" time="0.0946412" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMessageOverTheMaxMessageSizeThrows" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubMessageOverTheMaxMessageSizeThrows" time="0.0376786" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.CannotCallOverriddenBaseHubMethod" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="CannotCallOverriddenBaseHubMethod" time="0.0763142" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendingHandshakeRequestAndInvocationInSamePayloadParsesHandshakeAndInvocation" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendingHandshakeRequestAndInvocationInSamePayloadParsesHandshakeAndInvocation" time="0.0503632" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.UploadStreamReleasesHubActivatorOnceComplete" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="UploadStreamReleasesHubActivatorOnceComplete" time="0.1138597" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.CanLoadTypedHubContext" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="CanLoadTypedHubContext" time="0.003207" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.StreamHubMethodCanAcceptCancellationTokenAsArgumentAndBeTriggeredOnConnectionAborted" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="StreamHubMethodCanAcceptCancellationTokenAsArgumentAndBeTriggeredOnConnectionAborted" time="0.0154951" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ConnectionCloseCleansUploadStreams" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ConnectionCloseCleansUploadStreams" time="0.1179464" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.StreamHubMethodCanBeTriggeredOnCancellation(methodName: \&quot;CancelableStreamSingleParameter\&quot;, args: [])" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="StreamHubMethodCanBeTriggeredOnCancellation" time="0.0414873" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.StreamHubMethodCanBeTriggeredOnCancellation(methodName: \&quot;CancelableStreamMultiParameter\&quot;, args: [1, 2])" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="StreamHubMethodCanBeTriggeredOnCancellation" time="0.0321263" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.StreamHubMethodCanBeTriggeredOnCancellation(methodName: \&quot;CancelableStreamMiddleParameter\&quot;, args: [1, 2])" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="StreamHubMethodCanBeTriggeredOnCancellation" time="0.0231531" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.StreamHubMethodCanBeTriggeredOnCancellation(methodName: \&quot;CancelableStreamGeneratedAsyncEnumerable\&quot;, args: [])" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="StreamHubMethodCanBeTriggeredOnCancellation" time="0.0190859" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.StreamHubMethodCanBeTriggeredOnCancellation(methodName: \&quot;CancelableStreamCustomAsyncEnumerable\&quot;, args: [])" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="StreamHubMethodCanBeTriggeredOnCancellation" time="0.0173236" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SpecificHubOptionForMaximumReceiveMessageSizeIsUsedOverGlobalHubOption" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SpecificHubOptionForMaximumReceiveMessageSizeIsUsedOverGlobalHubOption" time="0.1058364" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMethodCanReturnValueTask" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubMethodCanReturnValueTask" time="0.0983209" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToMultipleUsers(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.DynamicTestHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToMultipleUsers" time="0.0733319" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToMultipleUsers(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.MethodHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToMultipleUsers" time="0.0916485" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToMultipleUsers(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.HubT))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToMultipleUsers" time="0.0755536" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.FailsToLoadInvalidTypedHubClient" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="FailsToLoadInvalidTypedHubClient" time="0.0014283" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanSendToUser(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.DynamicTestHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanSendToUser" time="0.044413" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanSendToUser(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.MethodHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanSendToUser" time="0.0844827" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubsCanSendToUser(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.HubT))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubsCanSendToUser" time="0.0496055" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendingHandshakeRequestInChunksWorks" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendingHandshakeRequestInChunksWorks" time="0.0540937" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ConnectionAbortedIfSendFailsWithProtocolError" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ConnectionAbortedIfSendFailsWithProtocolError" time="0" result="Skip">
        <reason><![CDATA[Cyclic parsing is not supported yet]]></reason>
      </test>
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMethodCanReturnValueFromTask" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubMethodCanReturnValueFromTask" time="0.0828219" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.AcceptsPingMessages" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="AcceptsPingMessages" time="0.08577" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.LifetimeManagerOnDisconnectedAsyncCalledIfLifetimeManagerOnConnectedAsyncThrows" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="LifetimeManagerOnDisconnectedAsyncCalledIfLifetimeManagerOnConnectedAsyncThrows" time="0.0237666" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ConnectionClosesOnServerWithPartialHandshakeMessageAndCompletedPipe" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ConnectionClosesOnServerWithPartialHandshakeMessageAndCompletedPipe" time="0.0356265" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ChunkedHubMessageOverTheMaxMessageSizeThrows" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ChunkedHubMessageOverTheMaxMessageSizeThrows" time="0.0408969" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.StreamUploadBufferCapacityBlocksOtherInvocations" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="StreamUploadBufferCapacityBlocksOtherInvocations" time="5.1274764" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ReceiveCorrectErrorFromStreamThrowing(detailedErrors: True)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ReceiveCorrectErrorFromStreamThrowing" time="0.0515565" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ReceiveCorrectErrorFromStreamThrowing(detailedErrors: False)" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ReceiveCorrectErrorFromStreamThrowing" time="0.0325118" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubMethodCanBeRenamedWithAttribute" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubMethodCanBeRenamedWithAttribute" time="0.1178713" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.UploadStreamCompleteInvalidId" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="UploadStreamCompleteInvalidId" time="0.1275117" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ManyHubMessagesUnderTheMessageSizeButConfiguredWithMax" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ManyHubMessagesUnderTheMessageSizeButConfiguredWithMax" time="0.0588968" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.HubOptionsCanNotHaveEmptySupportedProtocols" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="HubOptionsCanNotHaveEmptySupportedProtocols" time="0.1386267" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToOthers(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.DynamicTestHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToOthers" time="0.0676873" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToOthers(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.MethodHub))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToOthers" time="0.1257932" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.SendToOthers(hubType: typeof(Microsoft.AspNetCore.SignalR.Tests.HubT))" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="SendToOthers" time="0.0714201" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests.ClientsCallerPropertyCanBeUsedOutsideOfHub" type="Microsoft.AspNetCore.SignalR.Tests.HubConnectionHandlerTests" method="ClientsCallerPropertyCanBeUsedOutsideOfHub" time="0.0106118" result="Pass" />
    </collection>
    <collection total="37" passed="36" failed="0" skipped="1" name="EndToEndTestsCollection" time="5.874">
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.UnauthorizedDirectWebSocketsConnectionDoesNotConnect" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="UnauthorizedDirectWebSocketsConnectionDoesNotConnect" time="2.7008351" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.UnauthorizedHubConnectionDoesNotConnectWithEndpoints" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="UnauthorizedHubConnectionDoesNotConnectWithEndpoints" time="0.2358775" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.TransportThatFallsbackCreatesNewConnection" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="TransportThatFallsbackCreatesNewConnection" time="0.2103289" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.ServerClosesConnectionWithErrorIfHubCannotBeCreated_WebSocket" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="ServerClosesConnectionWithErrorIfHubCannotBeCreated_WebSocket" time="0.2982969" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.AuthorizedHubConnectionCanConnect" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="AuthorizedHubConnectionCanConnect" time="0.2797629" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.WebSocketsReceivesAndSendsPartialFramesTest" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="WebSocketsReceivesAndSendsPartialFramesTest" time="0.0410513" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.HttpRequestsNotSentWhenWebSocketsTransportRequestedAndSkipNegotiationSet" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="HttpRequestsNotSentWhenWebSocketsTransportRequestedAndSkipNegotiationSet" time="0.0501977" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.ConnectionCanSendAndReceiveMessages(transportType: WebSockets, requestedTransferFormat: Text)" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="ConnectionCanSendAndReceiveMessages" time="0.0645407" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.ConnectionCanSendAndReceiveMessages(transportType: WebSockets, requestedTransferFormat: Binary)" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="ConnectionCanSendAndReceiveMessages" time="0.1017054" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.ConnectionCanSendAndReceiveMessages(transportType: ServerSentEvents, requestedTransferFormat: Text)" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="ConnectionCanSendAndReceiveMessages" time="0.2840426" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.ConnectionCanSendAndReceiveMessages(transportType: LongPolling, requestedTransferFormat: Text)" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="ConnectionCanSendAndReceiveMessages" time="0.1102869" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.ConnectionCanSendAndReceiveMessages(transportType: LongPolling, requestedTransferFormat: Binary)" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="ConnectionCanSendAndReceiveMessages" time="0.0941277" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.UnauthorizedConnectionDoesNotConnect(transportType: LongPolling)" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="UnauthorizedConnectionDoesNotConnect" time="0.0492154" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.UnauthorizedConnectionDoesNotConnect(transportType: ServerSentEvents)" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="UnauthorizedConnectionDoesNotConnect" time="0.0824576" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.ServerClosesConnectionWithErrorIfHubCannotBeCreated_LongPolling" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="ServerClosesConnectionWithErrorIfHubCannotBeCreated_LongPolling" time="0.1245432" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.CanStartAndStopConnectionUsingGivenTransport(transportType: WebSockets)" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="CanStartAndStopConnectionUsingGivenTransport" time="0.0906243" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.CanStartAndStopConnectionUsingGivenTransport(transportType: ServerSentEvents)" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="CanStartAndStopConnectionUsingGivenTransport" time="0.0849984" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.CanStartAndStopConnectionUsingGivenTransport(transportType: LongPolling)" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="CanStartAndStopConnectionUsingGivenTransport" time="0.0809576" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.WebSocketsTest" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="WebSocketsTest" time="0.0533592" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.HttpConnectionThrowsIfSkipNegotiationSetAndTransportIsNotWebSockets(transportType: LongPolling)" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="HttpConnectionThrowsIfSkipNegotiationSetAndTransportIsNotWebSockets" time="0.0177877" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.HttpConnectionThrowsIfSkipNegotiationSetAndTransportIsNotWebSockets(transportType: ServerSentEvents)" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="HttpConnectionThrowsIfSkipNegotiationSetAndTransportIsNotWebSockets" time="0.0479111" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.AuthorizedHubConnectionCanConnectWithEndpoints" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="AuthorizedHubConnectionCanConnectWithEndpoints" time="0.0733438" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.UnauthorizedHubConnectionDoesNotConnect" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="UnauthorizedHubConnectionDoesNotConnect" time="0.0882557" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.CanStartAndStopConnectionUsingDefaultTransport" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="CanStartAndStopConnectionUsingDefaultTransport" time="0.0981588" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.AuthorizedConnectionCanConnect" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="AuthorizedConnectionCanConnect" time="0.0694861" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.UnauthorizedWebSocketsConnectionDoesNotConnect" type="Microsoft.AspNetCore.SignalR.Tests.EndToEndTests" method="UnauthorizedWebSocketsConnectionDoesNotConnect" time="0.1165641" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests.WebSocketsTransportThrowsForInvalidTransferFormat(transferFormat: Binary | Text)" type="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests" method="WebSocketsTransportThrowsForInvalidTransferFormat" time="0.0019234" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests.WebSocketsTransportThrowsForInvalidTransferFormat(transferFormat: 42)" type="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests" method="WebSocketsTransportThrowsForInvalidTransferFormat" time="0.0004227" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests.HttpOptionsSetOntoWebSocketOptions" type="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests" method="HttpOptionsSetOntoWebSocketOptions" time="0.0082077" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests.WebSocketsTransportStopsWhenConnectionClosedByTheServer(transferFormat: Binary)" type="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests" method="WebSocketsTransportStopsWhenConnectionClosedByTheServer" time="0.0514233" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests.WebSocketsTransportStopsWhenConnectionClosedByTheServer(transferFormat: Text)" type="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests" method="WebSocketsTransportStopsWhenConnectionClosedByTheServer" time="0.044855" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests.WebSocketsTransportSetsTransferFormat(transferFormat: Text)" type="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests" method="WebSocketsTransportSetsTransferFormat" time="0.0615897" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests.WebSocketsTransportSetsTransferFormat(transferFormat: Binary)" type="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests" method="WebSocketsTransportSetsTransferFormat" time="0.0395179" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests.WebSocketsTransportStopsSendAndReceiveLoopsWhenTransportIsStopped" type="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests" method="WebSocketsTransportStopsSendAndReceiveLoopsWhenTransportIsStopped" time="0.0358748" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests.WebSocketsTransportSendsXRequestedWithHeader" type="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests" method="WebSocketsTransportSendsXRequestedWithHeader" time="0.0432401" result="Pass" />
      <test name="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests.WebSocketsTransportSendsUserAgent" type="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests" method="WebSocketsTransportSendsUserAgent" time="0" result="Skip">
        <reason><![CDATA[Issue in ClientWebSocket prevents user-agent being set - https://github.com/dotnet/corefx/issues/26627]]></reason>
      </test>
      <test name="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests.WebSocketsTransportStopsWhenConnectionChannelClosed" type="Microsoft.AspNetCore.SignalR.Tests.WebSocketsTransportTests" method="WebSocketsTransportStopsWhenConnectionChannelClosed" time="0.037754" result="Pass" />
    </collection>
  </assembly>
</assemblies>